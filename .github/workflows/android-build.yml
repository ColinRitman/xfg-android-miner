name: Android Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        api-level: [21, 28, 30]
        build-type: [debug, release]
        exclude:
          - api-level: 21
            build-type: release
          - api-level: 28
            build-type: release
          - api-level: 30
            build-type: debug

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Run tests
      run: ./gradlew test

    - name: Run lint
      run: ./gradlew lint

    - name: Build APK
      run: ./gradlew assemble${{ matrix.build-type == 'debug' && 'Debug' || 'Release' }}
      env:
        ANDROID_SDK_ROOT: ${{ secrets.ANDROID_SDK_ROOT }}

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: xfg-android-miner-${{ matrix.api-level }}-${{ matrix.build-type }}
        path: app/build/outputs/apk/${{ matrix.build-type }}/app-${{ matrix.build-type }}.apk

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Run security scan
      run: |
        ./gradlew dependencyCheckAnalyze || true
        ./gradlew checkSecurity || true

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Build Release APK
      run: ./gradlew assembleRelease
      env:
        ANDROID_SDK_ROOT: ${{ secrets.ANDROID_SDK_ROOT }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          app/build/outputs/apk/release/app-release.apk
          **/*.apk
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    if: always()
    needs: [build, security-scan, release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Android build completed successfully!"
        else
          echo "❌ Android build failed!"
          exit 1
        fi